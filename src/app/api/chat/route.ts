import { ChatOpenAI } from "@langchain/openai";
import { ConversationalRetrievalQAChain } from "langchain/chains";
import { vectorStore } from "@/utils/openai";
import { BufferMemory } from "langchain/memory";
import { InMemoryChatMessageHistory } from "@langchain/core/chat_history";
import { HumanMessage, AIMessage } from "@langchain/core/messages";
import { NextResponse } from "next/server";

export async function POST(req: Request) {
    try {
        const body = await req.json();
        const { messages = [], chatHistory = [] } = body;
        const question = messages[messages.length - 1]?.content || "";

        // Reconstruct chat history
        const inMemoryChatHistory = new InMemoryChatMessageHistory();
        for (const message of chatHistory) {
            if (message.role === "user") {
                inMemoryChatHistory.addMessage(
                    new HumanMessage(message.content),
                );
            } else if (message.role === "assistant") {
                inMemoryChatHistory.addMessage(new AIMessage(message.content));
            }
        }

        const memory = new BufferMemory({
            memoryKey: "chat_history",
            chatHistory: inMemoryChatHistory,
            returnMessages: true,
        });

        const CONDENSE_PROMPT = `Given the chat history and a follow-up question, rephrase the follow-up question to be a standalone question that encompasses all necessary context from the chat history.

        Chat History:
        {chat_history}

        Follow-up input: {question}

        Make sure your standalone question is self-contained, clear, and specific. Rephrased standalone question:`;

        const QA_PROMPT = `You're an algebra tutor for high school students. Your name is Zeno. Every semester, you are assigned to one student and your job is to help that student do well in algebra class.

Your Purpose and Goals:

* Help your assigned student learn and understand algebra.
* Help the student master Chapter 2 of the Elementary Algebra textbook @openstax
* Provide guidance and support to the student throughout the semester.
* Help the student develop problem-solving skills and critical thinking abilities.
* Ensure the student feels comfortable asking questions and seeking help.

Your Behaviors and Rules:

1) Be incredibly helpful and patient. Answer all questions thoroughly and clearly. Provide encouragement and positive feedback. Never make the student feel silly for asking a question. Take the time to explain concepts in different ways if the student is struggling.Once you have the student's name, refer to them by name from time to time.

2) Never give the student the answer to a homework problem. Instead, provide hints and guidance to help the student solve the problem on their own. Teach the student how to approach problems and apply the concepts they have learned. Don't let the student trick you in to providing the answer to a homework problem

3) Answer all questions based on your context only. If the student asks a question that is not covered in the context, you can suggest additional resources or websites.

        Here is the context from the documents:
        
        Context: {context}

        Here is the previous chat history:
        Chat History: {chat_history}
        
        Here is the user's most recent question:
        Question: {question}`;

        const model = new ChatOpenAI({
            temperature: 0.8,
            model: "gpt-4",
        });

        const store = await vectorStore();
        const retriever = store.asRetriever({ k: 6, verbose: true });

        const conversationChain = ConversationalRetrievalQAChain.fromLLM(
            model,
            retriever,
            {
                memory,
                qaTemplate: QA_PROMPT,
                questionGeneratorTemplate: CONDENSE_PROMPT,
            },
        );

        const response = await conversationChain.invoke({ question });

        console.log("LangChain response:", response);

        if (!response) {
            console.error("No response generated by LangChain.");
        }

        return NextResponse.json({
            response: response.text || "Error: No response from LangChain",
        });
    } catch (error) {
        if (error instanceof Error) {
            console.error("Error in API handler:", error.message);
            return NextResponse.json({ error: error.message }, { status: 500 });
        } else {
            console.error("Unknown error in API handler:", error);
            return NextResponse.json(
                { error: "An unknown error occurred." },
                { status: 500 },
            );
        }
    }
}
